basePath: /api/v1
definitions:
  github_com_SimpleBookRental_backend_internal_models.Book:
    description: Book entity
    properties:
      author:
        description: Book author
        example: F. Scott Fitzgerald
        type: string
      created_at:
        description: Created at
        example: "2024-04-17T12:00:00Z"
        type: string
      description:
        description: Book description
        example: A classic novel
        type: string
      id:
        description: Book ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
      isbn:
        description: Book ISBN
        example: 978-1234567890
        type: string
      title:
        description: Book title
        example: The Great Gatsby
        type: string
      updated_at:
        description: Updated at
        example: "2024-04-17T12:00:00Z"
        type: string
      user:
        allOf:
        - $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
        description: Owner user
      user_id:
        description: Owner user ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
    type: object
  github_com_SimpleBookRental_backend_internal_models.BookCreate:
    description: Book create request
    properties:
      author:
        description: Book author
        example: F. Scott Fitzgerald
        type: string
      description:
        description: Book description
        example: A classic novel
        type: string
      isbn:
        description: Book ISBN
        example: 978-1234567890
        type: string
      title:
        description: Book title
        example: The Great Gatsby
        type: string
      user_id:
        description: Owner user ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
    required:
    - author
    - isbn
    - title
    type: object
  github_com_SimpleBookRental_backend_internal_models.BookTransferRequest:
    description: Book transfer request
    properties:
      from_user_id:
        description: From user ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
      to_user_id:
        description: To user ID
        example: c2b3a4d5-e6f7-8901-bcda-2345678901bc
        type: string
    required:
    - from_user_id
    - to_user_id
    type: object
  github_com_SimpleBookRental_backend_internal_models.BookUpdate:
    description: Book update request
    properties:
      author:
        description: Book author
        example: F. Scott Fitzgerald
        type: string
      description:
        description: Book description
        example: A classic novel
        type: string
      isbn:
        description: Book ISBN
        example: 978-1234567890
        type: string
      title:
        description: Book title
        example: The Great Gatsby
        type: string
      user_id:
        description: Owner user ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
    type: object
  github_com_SimpleBookRental_backend_internal_models.ErrorResponse:
    description: Error response
    properties:
      error:
        description: Error details
        example: Validation failed
        type: string
    type: object
  github_com_SimpleBookRental_backend_internal_models.LoginResponse:
    description: Login response
    properties:
      access_token:
        description: JWT access token
        example: jwt-token
        type: string
      expires_at:
        description: Expiry timestamp
        example: 1713345600
        type: integer
      refresh_token:
        description: Refresh token
        example: refresh-token
        type: string
      user:
        allOf:
        - $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
        description: User info
    type: object
  github_com_SimpleBookRental_backend_internal_models.LogoutRequest:
    description: Logout request
    properties:
      refresh_token:
        description: Refresh token
        example: refresh-token
        type: string
    required:
    - refresh_token
    type: object
  github_com_SimpleBookRental_backend_internal_models.RefreshTokenRequest:
    description: Refresh token request
    properties:
      refresh_token:
        description: Refresh token
        example: refresh-token
        type: string
    required:
    - refresh_token
    type: object
  github_com_SimpleBookRental_backend_internal_models.RefreshTokenResponse:
    description: Refresh token response
    properties:
      access_token:
        description: New access token
        example: jwt-token
        type: string
      expires_at:
        description: Expiry timestamp
        example: 1713345600
        type: integer
      refresh_token:
        description: New refresh token
        example: refresh-token
        type: string
    type: object
  github_com_SimpleBookRental_backend_internal_models.User:
    description: User entity
    properties:
      books:
        description: Books owned by user
        items:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.Book'
        type: array
      created_at:
        description: Created at
        example: "2024-04-17T12:00:00Z"
        type: string
      email:
        description: User email
        example: john@example.com
        type: string
      id:
        description: User ID
        example: b1a2c3d4-e5f6-7890-abcd-1234567890ab
        type: string
      name:
        description: User name
        example: John Doe
        type: string
      role:
        description: User role (ADMIN/USER)
        example: USER
        type: string
      updated_at:
        description: Updated at
        example: "2024-04-17T12:00:00Z"
        type: string
    type: object
  github_com_SimpleBookRental_backend_internal_models.UserCreate:
    description: User create request
    properties:
      email:
        description: User email
        example: john@example.com
        type: string
      name:
        description: User name
        example: John Doe
        type: string
      password:
        description: User password
        example: secret123
        minLength: 6
        type: string
    required:
    - email
    - name
    - password
    type: object
  github_com_SimpleBookRental_backend_internal_models.UserLogin:
    description: User login request
    properties:
      email:
        description: User email
        example: john@example.com
        type: string
      password:
        description: User password
        example: secret123
        type: string
    required:
    - email
    - password
    type: object
  github_com_SimpleBookRental_backend_internal_models.UserUpdate:
    description: User update request
    properties:
      email:
        description: User email
        example: john@example.com
        type: string
      name:
        description: User name
        example: John Doe
        type: string
      password:
        description: User password
        example: secret123
        minLength: 6
        type: string
    type: object
info:
  contact: {}
  description: RESTful API for book rental system (Go, Gin, GORM, Clean Architecture)
  title: Simple Book Rental API
  version: 1.0.0
paths:
  /api/v1/books:
    get:
      description: Get all books
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book
      parameters:
      - description: Book create payload
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.BookCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create book
      tags:
      - Books
  /api/v1/books/{id}:
    delete:
      description: Delete a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete book
      tags:
      - Books
    get:
      description: Get a book by its ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.Book'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get book by ID
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update a book by ID
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Book update payload
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.BookUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.Book'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update book
      tags:
      - Books
  /api/v1/books/{id}/transfer:
    post:
      consumes:
      - application/json
      description: Transfer a book from one user to another
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: string
      - description: Transfer request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.BookTransferRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Transfer book ownership
      tags:
      - Book-User Operations
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: User login
      parameters:
      - description: User login payload
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /api/v1/logout:
    post:
      consumes:
      - application/json
      description: User logout
      parameters:
      - description: Logout payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      summary: Logout
      tags:
      - Auth
  /api/v1/refresh-token:
    post:
      consumes:
      - application/json
      description: Refresh JWT token
      parameters:
      - description: Refresh token payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.RefreshTokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      summary: Refresh token
      tags:
      - Auth
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User register payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.UserCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      summary: Register user
      tags:
      - Auth
  /api/v1/users:
    get:
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: boolean
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete user
      tags:
      - Users
    get:
      description: Get a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      summary: Get user by ID
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User update payload
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/github_com_SimpleBookRental_backend_internal_models.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
